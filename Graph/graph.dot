/* keywords = [
    "boolean",
    "break",
    "continue",
    "else",
    "for",
    "float",
    "if",
    "int",
    "return",
    "void",
    "while"
] 

*/
digraph G {
    // Graph Layout
    rankdir = LR;
    splines = true;

    // start state
    start [shape = point];
    start_state [label = "0" shape = circle]; // STATE 0
    start -> start_state;

    state_error [label = "-1" shape = doublecircle color = red]; // STATE Error 

    node [shape = doublecircle; color = black];
    state_identifier [label = "999"]; // Identifier
    state_end_file [label = "888"]; // STATE end file

    // Detect Numeric token
    {
        // integer
        state_integer [label = "1"]; // STATE 1
        start_state -> state_integer [label = "0-9"];
        state_integer -> state_integer [label = "0-9"];
        // float
        // (0-9)*.
        // (0-9)*.(0-9)*
        state_float_1 [label = "2"]; // STATE 2
        state_integer -> state_float_1 [label = "dot '.'"];
        state_float_1 -> state_float_1 [label = "0-9"];
        // (0-9)* (E|e)+ (0-9)
        state_E_e_after_int [label = "3" shape = "circle"]; // STATE 3
        state_integer -> state_E_e_after_int [label = "'e' | 'E'"];
        state_float_2 [label = "4"]; // STATE 4
        state_E_e_after_int -> state_float_2 [label = "0-9"];
        state_float_2 -> state_float_2 [label = "0-9"];
        // (0-9)*.(0-9)+ (E|e)* (0-9)+
        state_float_1 -> state_E_e_after_int [label = "'e' | 'E'"];
        // (0-9)*.(0-9)+ (E|e)* (+|-) (0-9)+
        state_sign_after_E_e [label = "5" shape = "circle"]; // STATE 5
        state_E_e_after_int -> state_sign_after_E_e [label = "+ | -"]; 
        state_sign_after_E_e -> state_float_2 [label = "0-9"];
        // .(0-9)*
        state_dot [label = "6" shape = "circle"]; // STATE 6
        start_state -> state_dot [label = "dot '.'"];
        state_dot -> state_float_1 [label = "0-9"];
    }
    
    // detect operators
    {
        // + plus
        state_plus [label = "7"]; // STATE 7
        start_state -> state_plus [label = "+"];
        // - minus
        state_minus [label = "8"]; // STATE 8
        start_state -> state_minus [label = "-"];
        // / division
        state_division [label = "9"]; // STATE 9
        start_state -> state_division [label = "/"];
        // * multiply
        state_multiply [label = "10"]; // STATE 10
        start_state -> state_multiply [label = "*"];
        // = assign
        state_equal [label = "11"]; // STATE 11
        start_state -> state_equal [label = "="];
        // ==
        state_compare [label = "12"]; // STATE 12
        state_equal -> state_compare [label = "="];
        // < less than
        state_less_than [label = "13"]; // STATE 13
        start_state -> state_less_than [label = "<"];
        // <= less than or equal to
        state_less_than_equal [label = "14"]; // STATE 14
        state_less_than -> state_less_than_equal [label = "="];
        // > greater than
        state_greater_than [label = "15"]; // STATE 15
        start_state -> state_greater_than [label = ">"];
        // >= greater than or equal
        state_greater_than_equal [label = "16"]; // STATE 16
        state_greater_than -> state_greater_than_equal [label = "="];
        // ! not operator
        state_logical_not [label = "17"]; // STATE 17
        start_state -> state_logical_not [label = "!"];
        // != not equal
        state_not_equal [label = "18"]; // STATE 18
        state_logical_not -> state_not_equal [label = "="];
        // || logical OR
        state_OR_1 [label = "19" shape = "circle"]; // STATE 19
        start_state -> state_OR_1 [label = "|"];
        state_OR_2 [label = "20"]; // STATE 20
        state_OR_1 -> state_OR_2 [label = "|"];
        // && logical AND
        state_AND_1 [label = "21" shape = "circle"]; // STATE 21
        start_state -> state_AND_1 [label = "&"];
        state_AND_2 [label = "22"]; // STATE 22
        state_AND_1 -> state_AND_2 [label = "&"];
    }

    // Separators
    {
        // {
        state_open_bracket_1 [label = "23"]; // STATE 23
        start_state -> state_open_bracket_1 [label = "{"];
        // }
        state_close_bracket_1 [label = "24"]; // STATE 24
        start_state -> state_close_bracket_1 [label = "}"];
        // [
        state_open_bracket_2 [label = "25"]; // STATE 25
        start_state -> state_open_bracket_2 [label = "["];
        // ]
        state_close_bracket_2 [label = "26"]; // STATE 26
        start_state -> state_close_bracket_2 [label = "]"];
        // (
        state_open_bracket_3 [label = "27"]; // STATE 27
        start_state -> state_open_bracket_3 [label = "("];
        // )
        state_close_bracket_3 [label = "28"]; // STATE 28
        start_state -> state_close_bracket_3 [label = ")"];
        // ;
        state_semicolon [label = "29"]; // STATE 29
        start_state -> state_semicolon [label = ";"];
        // ,
        state_comma [label = "30"]; // STATE 30
        start_state -> state_comma [label = ","];
    }

    // keywords
    {
        // boolean
        state_boolean_1 [label = "30"]; // STATE 30 b
        state_boolean_2 [label = "31"]; // STATE 31 bo 
        state_boolean_3 [label = "32"]; // STATE 32 boo
        state_boolean_4 [label = "33"]; // STATE 33 bool
        state_boolean_5 [label = "34"]; // STATE 34 boole
        state_boolean_6 [label = "35"]; // STATE 35 boolea
        state_boolean_7 [label = "36"]; // STATE 36 boolean
        start_state -> state_boolean_1 [label = "b"];
        state_boolean_1 -> state_boolean_2 [label = "o"];
        state_boolean_2 -> state_boolean_3 [label = "o"];
        state_boolean_3 -> state_boolean_4 [label = "l"];
        state_boolean_4 -> state_boolean_5 [label = "e"];
        state_boolean_5 -> state_boolean_6 [label = "a"];
        state_boolean_6 -> state_boolean_7 [label = "n"];
        // break
        state_break_1 [label = "37"]; // STATE 37 br
        state_break_2 [label = "38"]; // STATE 38 bre
        state_break_3 [label = "39"]; // STATE 39 brea
        state_break_4 [label = "40"]; // STATE 40 break
        state_boolean_1 -> state_break_1 [label = "r"];
        state_break_1 -> state_break_2 [label = "e"];
        state_break_2 -> state_break_3 [label = "a"];
        state_break_3 -> state_break_4 [label = "k"];

        
    }

    // identifier
    {
        // go from boolean
        state_boolean_1 -> state_identifier [label = "[a-z|A-Z|0-9|_] except 'o' and 'r'"];
        state_boolean_2 -> state_identifier [label = "[a-z|A-Z|0-9|_] except 'o'"];
        state_boolean_3 -> state_identifier [label = "[a-z|A-Z|0-9|_] except 'l'"];
        state_boolean_4 -> state_identifier [label = "[a-z|A-Z|0-9|_] except 'e'"];
        state_boolean_5 -> state_identifier [label = "[a-z|A-Z|0-9|_] except 'a'"];
        state_boolean_6 -> state_identifier [label = "[a-z|A-Z|0-9|_] except 'n'"];
        state_boolean_7 -> state_identifier [label = "[a-z|A-Z|0-9|_]"];
        // go from break
        state_break_1 -> state_identifier [label = "[a-z|A-Z|0-9|_] except 'e'"];
        state_break_2 -> state_identifier [label = "[a-z|A-Z|0-9|_] except 'a'"];
        state_break_3 -> state_identifier [label = "[a-z|A-Z|0-9|_] except 'k'"];
        state_break_4 -> state_identifier [label = "[a-z|A-Z|0-9|_]"];
    }
}